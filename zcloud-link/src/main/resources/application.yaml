server:
  port: 8003

#-----------------------------------------------
#应用名称
spring:
  profiles:
    include: key
  application:
    name: zcloud-link-service

  #服务注册发现
  cloud:
    nacos:
      discovery:
        server-addr: ${NACOS_SERVER_ADDR:127.0.0.1:8848}
        username: ${NACOS_USERNAME:nacos}
        password: ${NACOS_PASSWORD:nacos}

#-----------------shardingSphere------------------------------
  #  数据库配置 配置ShardingSphere数据源
  shardingsphere:
    datasource:
      # 数据源名称
      names: ds0, ds1, dsa
      # 数据源ds0配置
      ds0:
        # 连接超时时间（毫秒）
        connectionTimeoutMilliseconds: 30000
        # 驱动类名
        driver-class-name: com.mysql.cj.jdbc.Driver
        # 空闲超时时间（毫秒）
        idleTimeoutMilliseconds: 60000
        # JDBC连接URL
        jdbc-url: jdbc:mysql://8.134.147.121:3306/zcloud_link_0?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
        # 维护间隔时间（毫秒）
        maintenanceIntervalMilliseconds: 30000
        # 连接最大生命周期（毫秒）
        maxLifetimeMilliseconds: 1800000
        # 连接池最大大小
        maxPoolSize: 50
        # 连接池最小大小
        minPoolSize: 50
        # 数据库用户名
        username: root
        # 数据库密码
        password: WcW191002
        # 数据源类型
        type: com.zaxxer.hikari.HikariDataSource
      # 数据源ds1配置
      ds1:
        # 连接超时时间（毫秒）
        connectionTimeoutMilliseconds: 30000
        # 驱动类名
        driver-class-name: com.mysql.cj.jdbc.Driver
        # 空闲超时时间（毫秒）
        idleTimeoutMilliseconds: 60000
        # JDBC连接URL
        jdbc-url: jdbc:mysql://8.134.147.121:3306/zcloud_link_1?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
        # 维护间隔时间（毫秒）
        maintenanceIntervalMilliseconds: 30000
        # 连接最大生命周期（毫秒）
        maxLifetimeMilliseconds: 1800000
        # 连接池最大大小
        maxPoolSize: 50
        # 连接池最小大小
        minPoolSize: 50
        # 数据库用户名
        username: root
        # 数据库密码
        password: WcW191002
        # 数据源类型
        type: com.zaxxer.hikari.HikariDataSource
      # 数据源dsa配置
      dsa:
        # 连接超时时间（毫秒）
        connectionTimeoutMilliseconds: 30000
        # 驱动类名
        driver-class-name: com.mysql.cj.jdbc.Driver
        # 空闲超时时间（毫秒）
        idleTimeoutMilliseconds: 60000
        # JDBC连接URL
        jdbc-url: ${MYSQL_URL}
        # 维护间隔时间（毫秒）
        maintenanceIntervalMilliseconds: 30000
        # 连接最大生命周期（毫秒）
        maxLifetimeMilliseconds: 1800000
        # 连接池最大大小
        maxPoolSize: 50
        # 连接池最小大小
        minPoolSize: 50
        # 数据库用户名
        username: ${MYSQL_USERNAME}
        # 数据库密码
        password: ${MYSQL_PASSWORD}
        # 数据源类型
        type: com.zaxxer.hikari.HikariDataSource
    props:
      # 打印执行的数据库以及语句
      sql:
        show: true
    # 分库分表配置具象配置
    sharding:
      # 不分库分表的默认数据源（当前是domain表ds0库）
      default-data-source-name: ds0
      default-key-generator:
        column: id
        props:
          worker:
            id: ${workId}
        type: SNOWFLAKE
      # 分库分表
      tables:
        # link_group表分库（2个库 1库1表）
        link_group:
          # 主键生成策略
          key-generator:
            column: id
            props:
              worker:
                id: ${workId}
            type: SNOWFLAKE
          # link_group表分库策略
          database-strategy:
            inline:
              sharding-column: account_no
              algorithm-expression: ds$->{account_no % 2}
        # short_link表分库且分表（3个库 1库2表）
        short_link:
          # 主键生成策略
          key-generator:
            column: id
            props:
              worker:
                id: ${workId}
            type: SNOWFLAKE
          # 指定数据节点
          actual-data-nodes: ds0.short_link,ds1.short_link,dsa.short_link
          # 分库策略
          database-strategy:
            standard:
              sharding-column: code
              precise-algorithm-class-name: com.zskj.link.strategy.sharding.CustomDBPreciseShardingAlgorithm
          # 分表策略
          table-strategy:
            standard:
              sharding-column: code
              precise-algorithm-class-name: com.zskj.link.strategy.sharding.CustomTablePreciseShardingAlgorithm
        # group_code_mapping表分库且分表（2库 1库2表）
        group_code_mapping:
          database-strategy:
            inline:
              sharding-column: account_no
              algorithm-expression: ds$->{account_no % 2}
          actual-data-nodes: ds$->{0..1}.group_code_mapping_$->{0..1}
          table-strategy:
            inline:
              sharding-column: group_id
              algorithm-expression: group_code_mapping_$->{group_id % 2}

#-----------------rabbit-mq配置------------------------------
  rabbitmq:
    host: 8.134.147.121
    port: 5672
    username: admin
    password: WcW191002
    listener:
      simple:
        # 消息确认方式，manual(手动ack) 和auto(自动ack); 消息消费重试到达指定次数进到异常交换机和异常队列，需要改为自动ack确认消息
        acknowledge-mode: auto
        retry:
          enabled: true
          # 最大重试次数
          max-attempts: 5
          # 重试消息的时间间隔，5秒
          initial-interval: 5000
    virtual-host: dev

#-----------------redis配置------------------------------
  # redis连接
  redis:
    client-type: jedis
    host: ${REDIS_HOST:127.0.0.1}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:123456}
    jedis:
      pool:
        # 连接池最大连接数（使用负值表示没有限制）
        max-active: 100
        # 连接池中的最大空闲连接
        max-idle: 100
        # 连接池中的最小空闲连接
        min-idle: 100
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: 60000


