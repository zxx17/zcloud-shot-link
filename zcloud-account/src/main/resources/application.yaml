server:
  port: 8001
#-----------------------------------------------


#应用名称
spring:
  application:
    name: zcloud-account-service

  #服务注册发现
  cloud:
    nacos:
      discovery:
        server-addr: 8.134.147.121:8848
        username: nacos
        password: WcW191002
#-----------------------------------------------

  # redis连接
  redis:
    client-type: jedis
    host: 8.134.147.121
    port: 6379
    password: WcW191002
    jedis:
      pool:
        # 连接池最大连接数（使用负值表示没有限制）
        max-active: 100
        # 连接池中的最大空闲连接
        max-idle: 100
        # 连接池中的最小空闲连接
        min-idle: 100
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: 60000

#-----------------------------------------------
  #数据库配置
  # 数据源 ds0 第一个数据库
  # 配置ShardingSphere数据源
  shardingsphere:
    datasource:
      # 数据源名称
      names: ds0
      # 数据源配置
      ds0:
        # 连接超时时间（毫秒）
        connectionTimeoutMilliseconds: 30000
        # 驱动类名
        driver-class-name: com.mysql.cj.jdbc.Driver
        # 空闲超时时间（毫秒）
        idleTimeoutMilliseconds: 60000
        # JDBC连接URL
        jdbc-url: jdbc:mysql://8.134.147.121:3306/zcloud_account?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
        # 维护间隔时间（毫秒）
        maintenanceIntervalMilliseconds: 30000
        # 连接最大生命周期（毫秒）
        maxLifetimeMilliseconds: 1800000
        # 连接池最大大小
        maxPoolSize: 50
        # 连接池最小大小
        minPoolSize: 50
        # 数据库用户名
        username: root
        # 数据库密码
        password: WcW191002
        # 数据源类型
        type: com.zaxxer.hikari.HikariDataSource
    props:
        # 打印执行的数据库以及语句
        sql:
          show: true
    sharding:
        tables:
          traffic:
            # 指定traffic表的数据分布情况，配置数据节点,行表达式标识符使用 ${...} 或 $->{...}，但前者与 Spring 本身的文件占位符冲突，所以在 Spring 环境中建议使用 $->{...}
            actual-data-nodes: ds0.traffic_$->{0..1}
            #水平分表策略+行表达式分片
            table-strategy:
              inline:
                algorithm-expression: traffic_$->{ account_no % 2 }
                sharding-column: account_no
            #id生成策略
            key-generator:
              column: id
              props:
                worker:
                  id: ${workId}
              #id生成策略
              type: SNOWFLAKE

  #-----------------rabbit-mq配置------------------------------
  rabbitmq:
    host: 8.134.147.121
    port: 5672
    username: admin
    password: WcW191002
    listener:
      simple:
        # 消息确认方式，manual(手动ack) 和auto(自动ack); 消息消费重试到达指定次数进到异常交换机和异常队列，需要改为自动ack确认消息
        acknowledge-mode: auto
        retry:
          enabled: true
          # 最大重试次数
          max-attempts: 5
          # 重试消息的时间间隔，5秒
          initial-interval: 5000
    virtual-host: dev

#----------sms短信配置 TODO: 所有涉及阿里云的accesskey后续都做ram分配--------------
sms:
  ali-cloud:
    enable: true
    endpoint: dysmsapi.aliyuncs.com
    access-key: LTAI5tK7uHwkPh7Ubazgs4xT
    access-secret: yzY3osfI2zmp3DkAjDdK9TQofndfpf
  ali-market:
    enable: false
    url: https://jmsms.market.alicloudapi.com/sms/send
    template-id: JM1000372
    app-code: 8482749e92314f6b89149240422665c3
#----------文件上传配置------------------------------
file-upload:
  oss:
    enable: true
    endpoint: oss-cn-hangzhou.aliyuncs.com
    endpoint-ecs: oss-cn-hangzhou-internal.aliyuncs.com
    bucket-name: dcloud-shot-link-project
    access-key: LTAI5tK7uHwkPh7Ubazgs4xT
    access-secret: yzY3osfI2zmp3DkAjDdK9TQofndfpf
  minio:
    enable: false
    endpoint:
    user:
    password:




  #-----------------xxl-job配置------------------------------
logging:
  config: classpath:logback.xml
xxl:
  job:
    enable: true
    accessToken: zsdlfupt
    admin:
      addresses: http://127.0.0.1:8080/xxl-job-admin
    executor:
      address: ''
      appname: traffic-app-executor
      ip: ''
      logpath: ./data/logs/xxl-job/executor
      logretentiondays: 30
      port: 9999
